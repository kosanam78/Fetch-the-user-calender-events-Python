#import the client secret file in your compiler , i am using GoogleCollab. Based on your requirements you can execute.
#make sure that the file name should ne easy to access.
#make sure you add your accessed Email address in Google CalenderAPI and give permission to authentication.

syntax:-

import os
import json
from datetime import datetime, timedelta
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

# If modifying these SCOPES, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']

def authenticate():
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh()
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'client_secret1.json', SCOPES)        #the client_secret1.json is your file
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.json', 'w') as token:
            token.write(creds.to_json())

    return creds

def fetch_events(creds, date):
    service = build('calendar', 'v3', credentials=creds)

    # Define the time range for the events to fetch
    start_time = datetime.combine(date, datetime.min.time()).isoformat() + 'Z'  # 'Z' indicates UTC time
    end_time = datetime.combine(date, datetime.max.time()).isoformat() + 'Z'

    # Call the Calendar API
    events_result = service.events().list(calendarId='primary', timeMin=start_time,
                                          timeMax=end_time, singleEvents=True,
                                          orderBy='startTime').execute()
    events = events_result.get('items', [])

    return events

def save_to_json(events, date):
    filename = f"events_{date.strftime('%Y-%m-%d')}.json"
    with open(filename, 'w') as json_file:
        json.dump(events, json_file, indent=4)
    print(f"Events saved to {filename}")

def main():
    date = datetime(2024, 9, 28)  # Replace with the desired date
    creds = authenticate()
    events = fetch_events(creds, date)

    if not events:
        print('No upcoming events found.')
    else:
        print('Upcoming events:')
        for event in events:
            start = event['start'].get('dateTime', event['start'].get('date'))
            print(start, event['summary'])

        save_to_json(events, date)

if __name__ == '__main__':
    main()
